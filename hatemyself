#!/bin/bash

clear

# Color Codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
RESET='\033[0m'

# Emojis
CPU_EMOJI="💻
RAM_EMOJI="📈
STORAGE_EMOJI="📁
CONNECT_EMOJI="🔗
ERROR_EMOJI="⚠"
ERROR_EMOJI_V2="❌"
SUCCESS_EMOJI="✅"

# Graceful Exit on Interrupt
trap 'echo -e "\n\n${RED}${ERROR_EMOJI_V2} Script interrupted. Exiting with status 1.${RESET}\n"; exit 1' SIGINT

# Display the banner
display_banner() {
  clear
  echo -e "${CYAN}"
  figlet XE-Gen11
  echo -e "${WHITE}A Free/Paid VPS Hosting Company with 2.5K+ Members (discord.gg/kvm)${RESET}"
  echo -e "${GREEN}======================================${RESET}"
  echo
  echo -e "Node Usage${RESET}"
  echo -e " ${RAM_EMOJI} RAM:   ${WHITE}$ram_usage${RESET}"
  echo -e " ${CPU_EMOJI} CPU:   ${WHITE}$cpu_usage${RESET}"
  echo -e " ${STORAGE_EMOJI} Storage:   ${WHITE}$storage_usage${RESET}"
  echo
}

# Retrieve RAM usage
# Retrieve RAM usage
get_ram_usage() {
  total_ram=$(free -m | awk '/^Mem:/ {print $2}')
  used_ram=$(free -m | awk '/^Mem:/ {print $3}')
  
  # Check if used RAM is less than 1024MB (1GB)
  if [ "$used_ram" -lt 1024 ]; then
    # Display in MB if used RAM is less than 1024MB
    echo "${used_ram}MB / 36TB"
  else
    # Display in GB if used RAM is 1024MB (1GB) or more
    used_ram_gb=$(echo "scale=2; $used_ram/1024" | bc)
    total_ram_gb=$(echo "scale=2; $total_ram/1024" | bc)
    echo "${used_ram_gb}GB / 36TB"
  fi
}


# Retrieve CPU usage
get_cpu_usage() {
  cpu_cores=$(nproc)
  cpu_usage=$(top -b -n1 | grep "Cpu(s)" | awk -F'[,]' '{usage=100 - $4; print usage}')
  
  cpu_usage=$(echo "$cpu_usage / $cpu_cores" | bc -l)
  cpu_usage=$(echo "$cpu_usage" | awk '{if($1>100) $1=100; print $1}')
  
  echo "${cpu_usage}%"
}

5B# Retrieve storage usage
get_storage_usage() {
  total_storage=$(df -h --total | grep "total" | awk '{print $2}')
  used_storage=$(df -h --total | grep "total" | awk '{print $3}')
  usage_percentage=$(df -h --total | grep "total" | awk '{print $5}')
  echo "${usage_percentage} / 1.3TB"
}

# Populate resource usage stats
ram_usage=$(get_ram_usage)
cpu_usage=$(get_cpu_usage)
storage_usage=$(get_storage_usage)

# Display the welcome banner
display_banner

# Main token validation loop
while true; do
  echo -e "\n┌──(enter@token)-[~] ${RESET}"
  echo -ne "${RED}└─> ${RESET}"
  
  token=""

  # Token entry (masked with asterisks)
  while IFS= read -r -s -n 1 char; do
    if [[ $char == $'\0' ]]; then
      break
    fi
    if [[ $char == $'\177' ]]; then
      if [[ -n "$token" ]]; then
        token=${token::-1}
        echo -ne "\b \b"
      fi
      continue
    fi
    token+="$char"
    echo -n "*"
  done
  echo

  # Check if the token is empty
  if [[ -z "$token" ]]; then
    echo -e "\n${RED}${ERROR_EMOJI_V2}  You must enter a valid token.${RESET}\n"
    continue
  fi

  # Verify the token against tokens.txt
  if ! grep -q "$token" tokens.txt; then
    echo -e "\n${RED}${ERROR_EMOJI_V2}  Invalid token. Please try again.${RESET}\n"
    continue
  fi

  # Extract relevant data
  server_ip=$(grep "$token" tokens.txt | cut -d ',' -f 2)
  port=$(grep "$token" tokens.txt | cut -d ',' -f 3)
  password=$(grep "$token" tokens.txt | cut -d ',' -f 4)

  # Validate port is numeric
  if ! [[ "$port" =~ ^[0-9]+$ ]]; then
    echo -e "\n${RED}${ERROR_EMOJI_V2}  Invalid port. Please check the token format in tokens.txt.${RESET}\n"
    continue
  fi

  # Attempt connection
  echo -e "\n${CYAN}${CONNECT_EMOJI}  Connecting to ${server_ip}:${port}...${RESET}"
  echo

  if sshpass -p "$password" ssh -p "$port" -o StrictHostKeyChecking=no root@$server_ip; then
    echo -e "${GREEN}${SUCCESS_EMOJI}  SSH session started successfully!${RESET}"
    echo -e ""
  else
    echo -e "${RED}${ERROR_EMOJI}  Failed to connect. Please verify your token and try again.${RESET}"
    echo -e ""
    continue
  fi

  clear
  echo -e "${CYAN}${SUCCESS_EMOJI}  SSH session ended.${RESET}"
  echo -e ""
  break
done
exit 0
