import hashlib
import time
import os
import sys
import signal
import random
from time import sleep

tokens_file = "tokens.txt"

def signal_handler(signal, frame):
    print("\n\nMining stopped. Don't forget to claim your TKS using /claim in discord.gg/kvm.\n")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

def generate_hash(starting_number):
    while True:
        rand_seed = random.random()
        hash_input = f"{time.time()}_{rand_seed}_{starting_number}".encode('utf-8')
        hash_output = hashlib.sha256(hash_input).hexdigest()

        with open(tokens_file, 'a') as f:
            f.write(f"{starting_number} | {hash_output}\n")

        yield hash_output, starting_number

        starting_number += random.randint(0, 0)

        random_sleep_time = random.uniform(0, 0)
        sleep(random_sleep_time)

def start_screen():
    print("")
    print("  _  ____     ____  __       _ _____   _____     _")
    print(" | |/ /\ \   / /  \/  |     (_)___  | |_   _|__ | | _____ _ __  ___ ")
    print(" | ' /  \ \ / /| |\/| |_____| |  / /    | |/ _ \| |/ / _ \ '_ \/ __| ")
    print(" | . \   \ V / | |  | |_____| | / /     | | (_) |   <  __/ | | \__ \ ")
    print(" |_|\_\   \_/  |_|  |_|     |_|/_/      |_|\___/|_|\_\___|_| |_|___/ ")
    print(" Pro-Enterprise-Miner")
    print("")
    print(" [Y/N] Start Mining\n")
    user_input = input(" > ").strip().lower()
    if user_input == "y":
        return True
    else:
        print("Exiting program. To mine tokens later, run the script again.")
        sys.exit(0)

def main():
    if start_screen():
        print("\nMining started...\n")
        starting_number = random.randint(1, 10000)
        hash_generator = generate_hash(starting_number)
        total_mined = 0
        start_time = time.time()
        hashes_mined_last_check = 0
        try:
            while True:
                hash_output, starting_number = next(hash_generator)
                total_mined += 1

                if time.time() - start_time >= 1:
                    elapsed_time = time.time() - start_time
                    current_hashrate = (total_mined - hashes_mined_last_check) / elapsed_time
                    speed = "Slow"
                    if current_hashrate >= 50:
                        speed = "Very Fast"
                    elif current_hashrate > 25:
                        speed = "Fast"

                    print(f"\rMined: {total_mined} TKS  |  Hashrate: {current_hashrate:.2f} Hashes / s  |  Speed: {speed}", end="")

                    hashes_mined_last_check = total_mined
                    start_time = time.time()
                sleep(0.00)
        except KeyboardInterrupt:
            pass

if __name__ == "__main__":
    main()
